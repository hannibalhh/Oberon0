//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 07 15:26:18 CEST 2012
//----------------------------------------------------

package Praktikum1.CUP;

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Sat Apr 07 15:26:18 CEST 2012
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\011\000\002\002\004\000\002\002\004\000\002\002"
			+ "\003\000\002\005\002\000\002\003\005\000\002\004\003"
			+ "\000\002\004\005\000\002\004\005\000\002\004\005" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\020\000\006\007\010\011\005\001\002\000\010\002"
			+ "\uffff\007\uffff\011\uffff\001\002\000\012\004\ufffc\005\ufffc"
			+ "\006\ufffc\010\ufffc\001\002\000\010\002\022\007\010\011"
			+ "\005\001\002\000\010\004\ufffe\005\013\006\014\001\002"
			+ "\000\006\007\010\011\005\001\002\000\010\005\013\006"
			+ "\014\010\012\001\002\000\012\004\ufff9\005\ufff9\006\ufff9"
			+ "\010\ufff9\001\002\000\006\007\010\011\005\001\002\000"
			+ "\006\007\010\011\005\001\002\000\012\004\ufffa\005\ufffa"
			+ "\006\ufffa\010\ufffa\001\002\000\012\004\ufffb\005\ufffb\006"
			+ "\014\010\ufffb\001\002\000\004\004\020\001\002\000\010"
			+ "\002\ufffd\007\ufffd\011\ufffd\001\002\000\010\002\001\007"
			+ "\001\011\001\001\002\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\020\000\010\002\005\003\003\004\006\001\001\000"
			+ "\002\001\001\000\002\001\001\000\006\003\020\004\006"
			+ "\001\001\000\004\005\016\001\001\000\004\004\010\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\004\015"
			+ "\001\001\000\004\004\014\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length == 0)
			new parser(new Scanner(System.in, sf), sf).parse();
		else
			new parser(new Scanner(new java.io.FileInputStream(args[0]), sf),
					sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {
	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(
			int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser,
			java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // expr ::= LPAREN expr RPAREN
		{
			Integer RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = e;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // expr ::= expr TIMES expr
		{
			Integer RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Integer r = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = new Integer(l.intValue() * r.intValue());
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // expr ::= expr PLUS expr
		{
			Integer RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Integer r = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = new Integer(l.intValue() + r.intValue());
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // expr ::= NUMBER
		{
			Integer RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Integer n = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = n;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // expr_part ::= expr NT$0 SEMI
		{
			Object RESULT = null;
			// propagate RESULT from NT$0
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr_part",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // NT$0 ::=
		{
			Object RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			System.out.println(" = " + e + ";");
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"NT$0",
							3,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // expr_list ::= expr_part
		{
			Object RESULT = null;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr_list",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= expr_list EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // expr_list ::= expr_list expr_part
		{
			Object RESULT = null;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expr_list",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
